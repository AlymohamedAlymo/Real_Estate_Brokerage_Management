//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Real_Estate_Management.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class test2024Entities : DbContext
    {
        public test2024Entities()
            : base("name=test2024Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<vwAccountBalance> vwAccountBalances { get; set; }
        public virtual DbSet<vwDailSell> vwDailSells { get; set; }
        public virtual DbSet<vwGeneralAccountLandSale> vwGeneralAccountLandSales { get; set; }
        public virtual DbSet<vwLandQty> vwLandQties { get; set; }
        public virtual DbSet<vwLandTran> vwLandTrans { get; set; }
    
        [DbFunction("test2024Entities", "fnAccountBalance")]
        public virtual IQueryable<fnAccountBalance_Result> fnAccountBalance(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnAccountBalance_Result>("[test2024Entities].[fnAccountBalance](@startdate, @enddate)", startdateParameter, enddateParameter);
        }
    
        [DbFunction("test2024Entities", "fnDailySalesGrouped")]
        public virtual IQueryable<fnDailySalesGrouped_Result> fnDailySalesGrouped(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, string status)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnDailySalesGrouped_Result>("[test2024Entities].[fnDailySalesGrouped](@startdate, @enddate, @status)", startdateParameter, enddateParameter, statusParameter);
        }
    
        [DbFunction("test2024Entities", "fnGetAgentData")]
        public virtual IQueryable<fnGetAgentData_Result> fnGetAgentData(Nullable<int> agenttype, string datatype)
        {
            var agenttypeParameter = agenttype.HasValue ?
                new ObjectParameter("agenttype", agenttype) :
                new ObjectParameter("agenttype", typeof(int));
    
            var datatypeParameter = datatype != null ?
                new ObjectParameter("datatype", datatype) :
                new ObjectParameter("datatype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetAgentData_Result>("[test2024Entities].[fnGetAgentData](@agenttype, @datatype)", agenttypeParameter, datatypeParameter);
        }
    
        [DbFunction("test2024Entities", "fnPaysGrouped")]
        public virtual IQueryable<fnPaysGrouped_Result> fnPaysGrouped(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnPaysGrouped_Result>("[test2024Entities].[fnPaysGrouped](@startdate, @enddate)", startdateParameter, enddateParameter);
        }
    
        public virtual int prcupdatelandstatus(Nullable<System.Guid> landguid)
        {
            var landguidParameter = landguid.HasValue ?
                new ObjectParameter("landguid", landguid) :
                new ObjectParameter("landguid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("prcupdatelandstatus", landguidParameter);
        }
    }
}
